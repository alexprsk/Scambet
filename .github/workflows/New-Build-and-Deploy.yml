name: New Build Backend and Deploy

permissions:
  id-token: write  
  contents: read

run-name: Build Backend and Deploy from branch ${{ github.ref_name }} by @${{ github.actor }}

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # Declaring outputs here  expose them to other jobs
    outputs:
      gh_repo: ${{ steps.export_repo.outputs.gh_repo }}
      tag: ${{ steps.export_repo.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.actor }}/prd.scambet
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Export GH_REPO and tag for the Next Job
        id: export_repo
        run: |
          gh_repo="${{ steps.meta.outputs.images }}"
          tags="${{ steps.meta.outputs.tags }}"

          # Extract first semver tag excluding 'latest'
          tag=$(echo "$tags" | tr ',' '\n' | grep -v latest | head -n1 | cut -d ':' -f2)

          echo "gh_repo=$gh_repo" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

  deploy-new-be-version:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout 
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-for-EC2-full
          role-session-name: BackendDeployment
          audience: sts.amazonaws.com

      - name: Get Runner IP Address
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Whitelist runner IP address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Upload image to EC2 and reload container
        env:
          GH_REPO: ${{ needs.build-and-push.outputs.gh_repo }}
          TAG: ${{ needs.build-and-push.outputs.tag }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > temp_ssh_key.pem
          chmod 600 temp_ssh_key.pem

          ssh -i temp_ssh_key.pem -o StrictHostKeyChecking=no ubuntu@"$EC2_HOST" << EOF
            echo "Pulling image $GH_REPO:$TAG"
            sudo docker pull $GH_REPO:$TAG
            sudo docker compose stop scambet || true
            sudo docker compose rm -f scambet || true
            sudo docker compose up -d
            docker image prune --force
          EOF

      - name: Revoke Runner IP Address
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32            

      - name: Cleanup SSH key
        run: rm -f temp_ssh_key.pem

      - name: Generate and display deployment summary
        env:
          DEPLOYED_BRANCH: ${{ github.ref_name }}
          TRIGGERED_BY: ${{ github.actor }}
          RUN_NUMBER: ${{ github.run_number }}
          GH_REPO: ${{ needs.build-and-push.outputs.gh_repo }}
          GITHUB_TAG: ${{ needs.build-and-push.outputs.tag }}
        run: |
          {
            echo "### 🚀 Backend Deployment Summary"
            echo ""
            echo "**Status:** ✅ Success"
            echo "**Deployed Branch:** \`${DEPLOYED_BRANCH}\`"
            echo "**Triggered by:** \`@${TRIGGERED_BY}\`"
            echo "**Run Number:** \`${RUN_NUMBER}\`"
            echo ""
            echo "### 📦 Docker Image Details"
            echo "- **Repository:** \`${GH_REPO}\`"
            echo "- **Tags:**"
            echo "  - \`${GITHUB_TAG}\` "
            echo ""
            echo "### 🧱 Build & Deploy Steps"
            echo "1. ✅ Code checkout"
            echo "2. ✅ Docker image built and tagged"
            echo "3. ✅ Image pushed to GHCR"
            echo "4. ✅ EC2 instance pulled the latest image"
            echo "5. ✅ Container restarted with Docker Compose"
            echo "6. ✅ Old images pruned"
            echo ""
            echo "### 🐳 Docker Commands for Manual Use"
            echo "**Pull latest image:**"
            echo "\`\`\`bash"
            echo "docker pull ${GH_REPO}:${GITHUB_TAG}"
            echo "\`\`\`"
            echo "**Run the container locally:**"
            echo "\`\`\`bash"
            echo "docker run -p 80:80 ${GH_REPO}:${GITHUB_TAG}"
            echo "\`\`\`"
            echo ""
            echo "### 🔒 EC2 Access Info"
            echo "- IP whitelisted temporarily during deploy"
            echo "- SSH key removed after deployment"
            echo ""
            echo "---"
            echo "_Generated on $(date -u) UTC_"
          } >> $GITHUB_STEP_SUMMARY
