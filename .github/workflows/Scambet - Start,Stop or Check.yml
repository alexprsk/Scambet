name: Start/Stop Scambet

permissions:
  id-token: write  
  contents: read

run-name: "Start/Stop Scambet action - action: ${{ github.event.inputs.action }} from branch ${{ github.ref_name }} by @${{ github.actor }}" 

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose an action: start, stop or check"
        type: choice
        required: true
        options: 
          - start
          - stop
          - check


jobs:
  Start-or-Stop:
    runs-on: ubuntu-latest
    
    steps:
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-for-EC2-full
          role-session-name: FrontendDeployment
          audience: sts.amazonaws.com
          
      - name: Check Scambet Instances
        if: github.event.inputs.action == 'check'
        run: |

          INSTANCE_IDS=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "stopped") | .InstanceId')

          if [ -z "$INSTANCE_IDS" ]; then
            echo "✅ Scambet is not up (no stopped instances)."
          else
            echo "🖥️ Found stopped instance(s): $INSTANCE_IDS"
            
            # Get the names of the stopped instances
            INSTANCE_NAMES=$(aws ec2 describe-instances --region eu-central-1 --output json \
              | jq -r '.Reservations[].Instances[] | select(.State.Name == "stopped") | .Tags[]? | select(.Key == "Name") | .Value')

            echo "🔍 Names of stopped instances: $INSTANCE_NAMES"
          fi


      - name: Stop Scambet Instances
        if: github.event.inputs.action == 'stop'
        run: |

          INSTANCE_IDS=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "running") | .InstanceId')

          INSTANCE_NAMES=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "running") | .Tags[]? | select(.Key == "Name") | .Value')

          if [ -z "$INSTANCE_IDS" ]; then

            echo "✅ Scambet is already stopped. No running instances."

          else

            echo "🛑 Stopping Instances with ID(s): $INSTANCE_IDS"
            echo "🖥️ Name(s): $INSTANCE_NAMES"

            aws ec2 stop-instances --instance-ids $INSTANCE_IDS
            echo "Instances Stopped"
          fi


      - name: Start Scambet Instances
        if: github.event.inputs.action == 'start'
        run: |

          INSTANCE_IDS=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "stopped") | .InstanceId')
          
          INSTANCE_NAMES=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "stopped") | .Tags[]? | select(.Key == "Name") | .Value')

          if [ -n "$INSTANCE_IDS" ]; then

            echo "⚙️ Starting Instances with Id(s): $INSTANCE_IDS"
            echo "🖥️ Name(s): $INSTANCE_NAMES"
            aws ec2 start-instances --instance-ids $INSTANCE_IDS
            echo "Instances Started"

          else

            echo "✅ Scambet is Already Up: $INSTANCE_IDS"

          fi

      - name: Get Runner IP Address
        id: ip
        uses: haythem/public-ip@v1.2
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32


      - name: Docker Compose Up
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > temp_ssh_key.pem
          chmod 600 temp_ssh_key.pem

          ssh -i temp_ssh_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            sudo docker compose up -d
          EOF
          
      - name: Revoke Runner IP Address
        if: always()  # Ensures this runs even if previous steps fail
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32            

      

      - name: Cleanup SSH key
        if: always()
        run: rm -f temp_ssh_key.pem


        
