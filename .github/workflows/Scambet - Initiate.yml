name: Start/Stop Scambet

permissions:
  id-token: write  
  contents: read

run-name: "Start Scambet from branch ${{ github.ref_name }} by @${{ github.actor }}" 

on:
  workflow_dispatch:

jobs:
  Start-or-Stop:
    runs-on: ubuntu-latest
    
    steps:
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-for-EC2-full
          role-session-name: FrontendDeployment
          audience: sts.amazonaws.com

      - name: Start Scambet Instances
        run: |

          INSTANCE_IDS=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "stopped") | .InstanceId')
          
          INSTANCE_NAMES=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "stopped") | .Tags[]? | select(.Key == "Name") | .Value')

          if [ -n "$INSTANCE_IDS" ]; then

            echo "⚙️ Starting Instances with Id(s): $INSTANCE_IDS"
            echo "🖥️ Name(s): $INSTANCE_NAMES"
            aws ec2 start-instances --instance-ids $INSTANCE_IDS
            echo "Instances Started"

          else

            echo "✅ Scambet is Already Up: $INSTANCE_IDS"
            exit 0

          fi

      - name: Get Runner IP Address
        id: ip
        uses: haythem/public-ip@v1.2


      - name: Whitelist Runner IP Address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32


      - name: Run Docker Compose Up
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > temp_ssh_key.pem
          chmod 600 temp_ssh_key.pem

          ssh -i temp_ssh_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }}
            sudo docker compose up -d

          
      - name: Revoke Runner IP Address
        if: always()  # Ensures this runs even if previous steps fail
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32            

      

      - name: Cleanup SSH key
        if: always()
        run: rm -f temp_ssh_key.pem


        
