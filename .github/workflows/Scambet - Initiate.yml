name: Scambet - Initiate

permissions:
  id-token: write
  contents: read

run-name: "Start Scambet from branch ${{ github.ref_name }} by @${{ github.actor }}"

on:
  workflow_dispatch:

jobs:
  Initiate-Scambet-Instances:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-for-EC2-full
          role-session-name: FrontendDeployment
          audience: sts.amazonaws.com

      - name: Start Scambet Instances
        run: |

          INSTANCE_IDS=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "stopped") | .InstanceId')

          INSTANCE_NAMES=$(aws ec2 describe-instances --region eu-central-1 --output json \
            | jq -r '.Reservations[].Instances[] | select(.State.Name == "stopped") | .Tags[]? | select(.Key == "Name") | .Value')

          if [ -n "$INSTANCE_IDS" ]; then

            echo "⚙️ Starting Instances with Id(s): $INSTANCE_IDS"
            echo "🖥️ Name(s): $INSTANCE_NAMES"

            aws ec2 start-instances --instance-ids $INSTANCE_IDS
            echo "⏳ Waiting for instance(s) to be in 'ok' status..."

            aws ec2 wait instance-status-ok --instance-ids $INSTANCE_IDS
            echo "✅ Instance(s) are now running and ready."

          else

            echo "✅ Scambet is Already Up: $INSTANCE_IDS"
            exit 0

          fi

      - name: Get Runner IP Address
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Whitelist Runner IP Address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Run Docker Compose Up
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > temp_ssh_key.pem
          chmod 600 temp_ssh_key.pem

          ssh -i temp_ssh_key.pem -o ConnectTimeout=30 -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'

            cd /home/ubuntu
            cur_dir=$(pwd)
            
            if [ "$cur_dir" = "/home/ubuntu" ]; then
              echo "✅ Path is correct: $cur_dir"
            else
              echo "❌ Path is not correct: $cur_dir"
              echo "Exiting..."
              exit 1
            fi

            if ls ./nginx/ | grep -q nginx.conf; then
              echo "✅ nginx.conf file located in ./nginx/nginx.conf"
            else
              echo "❌ nginx.conf file not found in ./nginx/"
              echo "Exiting..."
              exit 1
            fi

            echo "🚀 Running Docker Compose up"
            sudo docker compose up -d
          EOF

      - name: Revoke Runner IP Address
        if: always() # Ensures this runs even if previous steps fail
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Cleanup SSH key
        if: always()
        run: rm -f temp_ssh_key.pem
